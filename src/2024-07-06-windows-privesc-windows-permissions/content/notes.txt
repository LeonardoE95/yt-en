                     ______________________________

                      WINDOWS PRIVILEGE ESCALATION
                          Windows Permissions

                            Leonardo Tamiano
                     ______________________________


Table of Contents
_________________

1. Authentication, Authorization and Session Management
2. Security Principals and Security Identifier (SID)
.. 1. SID Structure
.. 2. Well-Known SIDs
.. 3. Enumerating SIDs
3. Access Token
4. Files Permissions (icacls)
5. Mandatory Integrity Control (MIC)
6. User Account Control (UAC)
7. References


1 Authentication, Authorization and Session Management
======================================================

  Anytime we interact with a secure digital system that has different
  permission roles, we will always have to deal with the following three
  aspects

  - *Authentication*: who are you?

  - *Authorization*: what can you do?

  - *Session Management*: how are information regarding the identity of
    the user stored and processed while a user is having an
    authenticated session?


2 Security Principals and Security Identifier (SID)
===================================================

  *Security principals* can represent any entity that can be
  authenticated by the operating system.

  A security identifier is used to uniquely identify a security
  principal or security group.

  SID -> Security Identifier.

  Examples of security principales:

  - user account
  - computer account
  - thread or process

  The SID cannot be changed is and is generated upon the user or groups
  creation.

  SIDs are generated by different components depending on the situation:

  - The SID for local accounts and groups is generated by the *Local
    Security Authority* (LSA).

  - The SID for domain users and domain groups is generated by the
    *Domain Controller* (DC).

  SIDs are used by Windows to identify security principals for access
  control management (authorization controls).


2.1 SID Structure
~~~~~~~~~~~~~~~~~

  The SID is made up of different parts

  ,----
  | S-R-X-Y1-Y2-Yn-1-Yn
  `----

  where:

  - S indicates that the string is a SID.

  - R indicates the `revision' of the SID structured that is used.

    Typically it has a value of 1.

  - X determines the `identifier authority' that issued the SID.

  - Y determines the `Subauthorities'.

    All values up to, but not including, the last value in the series
    collectively identify a domain in an enterprise. This part of the
    series is called the `domain identifier'.

    The last value in the series, which is called the `relative
        identifier' (RID), identifies a particular account or group
        relative to a domain.

  The SID's most important information is contained in the series of
  subauthority values. The first part of the series (-Y1-Y2-Yn-1) is the
  domain identifier.

  No two domains in an enterprise share the same domain identifier.

  The last item in the series of subauthority values (-Yn) is the
  relative identifier. It distinguishes one account or group from all
  other accounts and groups in the domain.

  No two accounts or groups in any domain share the same relative
  identifier.

  ----------------------------------------------------------------------

  Consider the following SID

  ,----
  | S-1-5-32-544
  `----

  This SID has four components:

  - A revision level (1)
  - An identifier authority value (5, NT Authority)
  - A domain identifier (32, Builtin)
  - A relative identifier (544, Administrators)

  Consider another SID.

  The following example represents the SID for the Domain Admins group
  in the Contoso, Ltd. domain (Contoso\Domain Admins)

  ,----
  | S-1-5-21-1004336348-1177238915-682003330-512
  `----

  The SID for Contoso\Domain Admins has:

  - A revision level (1)
  - An identifier authority (5, NT Authority)
  - A domain identifier (21-1004336348-1177238915-682003330, Contoso)
  - A relative identifier (512, Domain Admins)

  The SID for Contoso\Domain Admins is distinguished from the SIDs for
  other Domain Admins groups in the same enterprise by its domain
  identifier:

  ,----
  | 21-1004336348-1177238915-682003330
  `----

  The SID for Contoso\Domain Admins is distinguished from the SIDs for
  other accounts and groups that are created in the Contoso domain by
  its relative identifier,

  ,----
  | 512
  `----


2.2 Well-Known SIDs
~~~~~~~~~~~~~~~~~~~

  The values of certain SIDs are constant across all systems.

  They're created when the operating system or domain is
  installed. They're called *well-known SIDs* because they identify
  generic users or generic groups.

  There are universal well-known SIDs that are meaningful on all secure
  systems that use this security model, including operating systems
  other than Windows.

  In addition, there are well-known SIDs that are meaningful only on
  Windows operating systems.


2.3 Enumerating SIDs
~~~~~~~~~~~~~~~~~~~~

  Obtain the SID for the current logged-in user

  ,----
  | C:\Users\Quickemu>whoami /user
  | 
  | USER INFORMATION
  | ----------------
  | 
  | User Name                SID
  | ======================== ==============================================
  | quickem-u2fn67a\quickemu S-1-5-21-3429105185-2539452721-1868106196-1000
  `----

  We can enumerate SIDs with the `wmic' command

  ,----
  | C:\Users\Quickemu>wmic useraccount get domain,name,sid
  | Domain           Name                SID
  | QUICKEM-U2FN67A  Administrator       S-1-5-21-3429105185-2539452721-1868106196-500
  | QUICKEM-U2FN67A  DefaultAccount      S-1-5-21-3429105185-2539452721-1868106196-503
  | QUICKEM-U2FN67A  Guest               S-1-5-21-3429105185-2539452721-1868106196-501
  | QUICKEM-U2FN67A  Quickemu            S-1-5-21-3429105185-2539452721-1868106196-1000
  | QUICKEM-U2FN67A  WDAGUtilityAccount  S-1-5-21-3429105185-2539452721-1868106196-504
  `----


3 Access Token
==============

  Upon user authentication, an access token is generated by windows and
  assigned to the user. The token contains data that determines the
  security context of the user and is later used for performing
  authorization checks.

  Access Tokens contain the following information:

  - The Security Identifier (SID) for the user's account.
  - SIDs for the groups of which the user is a member.
  - A logon SID that identifies the current logon session.
  - A list of the privileges held by the user or the user's groups.
  - An owner SID.
  - The SID for the primary group.
  - The default DACL the system uses when the user creates a securable
    object.
  - The source of the access token.
  - Whether the token is a `primary' or `impersonation' token.
  - An optional list of `restricting SIDs'.
  - Current impersonation levels.
  - Other statistics.

  When a user starts a process or thread, a token will be assigned to
  these objects. The token is called a `primary token' and it specifies
  the permissions of the process or thread.

  Processes and threads can also have an `impersonation token'
  assigned. They are used to change the security context than the
  process that owns the thread.

  To retrieve the primary token use the following win32 APIs:

  - `OpenProcesstoken()' for processes.
  - `OpenThreadToken()' for threads.


4 Files Permissions (icacls)
============================

  To check the permissions on a given file we can use the `icacls'
  command as follows.

  ,----
  | C:\Users\Quickemu\Desktop>icacls CMD.txt
  | CMD.txt NT AUTHORITY\SYSTEM:(I)(F)
  |         BUILTIN\Administrators:(I)(F)
  |         QUICKEM-U2FN67A\Quickemu:(I)(F)
  | 
  | Successfully processed 1 files; Failed processing 0 files
  `----

  ,----
  | PS C:\Folder> icacls binary.exe
  | binary.exe Everyone:(I)(F)
  |            BUILTIN\Administrators:(I)(F)
  |            NT AUTHORITY\SYSTEM:(I)(F)
  |            BUILTIN\Users:(I)(RX)
  |            NT AUTHORITY\Authenticated Users:(I)(M)
  | 
  | Successfully processed 1 files; Failed processing 0 files
  `----

  The program displays ACLs, where each ACL is made up of various ACEs

  ACL -> Access Control List ACE -> Access Control Entry

  Each ACL has the following structure

  ,----
  | <SID>:<Perm>
  `----

  Where SIDs may be in either numerical or friendly name form.

  ----------------------------------------------------------------------

  An Access Control Entry (ACE) si an individual permission rule which
  controls the individual permissions of a security principal on a file
  object. These are the following high-level permissions for an ACL:

  - Fully Access (F)
  - Modify Access (M)
  - Read and Execute Access (RX)
  - Read-Only Access (R)
  - Write-Only Access (W)

  There are more advanced permissions too that deal with inheritance
  rights, which only apply to directories.

  - (OI) Object Inerit
  - (CI) Container Inherit
  - (IO) Inherit Only
  - (NP) Do not propagate inherit
  - (I) Permission inherited from parent container

  ----------------------------------------------------------------------

  To list out these permissions we can use `icacls' in the normal
  `cmd.exe' and `Get-Acl' and `Set-Acl' when using powershell.

  To grant a specific permission we proceed as follows

  ,----
  | icacls test.txt /grant hostname\username:R /t /c
  `----

  where the `/t' is used to set the permissions recursively on the
  entire folder, and the `/c' tells the command to keep going.


5 Mandatory Integrity Control (MIC)
===================================

  MIC -> Mandatory Integrity Control

  MIC provides a mechanism for controlling access to securable
  objects. This mechanism is in addition to discretionary access control
  and evaluates access before access checks against an object's
  discretionary access control list (DACL) are evaluated.

  When processes are started or objects are created, they receive the
  integrity level of the principal performing this operation.

  Windows defines four integrity levels:

  - System
  - High
  - Medium
  - Low

  Standard users receive medium, elevated users receive high.

  When a user attempts to launch an executable file, the new process is
  created with the minimum of the user integrity level and the file
  integrity level. This means that the new process will never execute
  with higher integrity than the executable file.

  If the administrator user executes a low integrity program, the token
  for the new process functions with the low integrity level.

  ----------------------------------------------------------------------

  To understand your current integrity level you can execute `whoami
  /groups'

  ,----
  | C:\Users\Quickemu\Desktop>whoami /groups
  | 
  | GROUP INFORMATION
  | -----------------
  | 
  | Group Name                                                    Type             SID          Attributes
  | ============================================================= ================ ============ ===============================================================
  | Everyone                                                      Well-known group S-1-1-0      Mandatory group, Enabled by default, Enabled group
  | NT AUTHORITY\Local account and member of Administrators group Well-known group S-1-5-114    Mandatory group, Enabled by default, Enabled group
  | ...
  | Mandatory Label\High Mandatory Level                          Label            S-1-16-12288
  `----

  To change the integrity level of an object you can use the `icacls'
  command as follows

  ,----
  | C:\Users\Quickemu\Desktop>icacls test.txt /setintegritylevel high
  | processed file: test.txt
  | Successfully processed 1 files; Failed processing 0 files
  | 
  | C:\Users\Quickemu\Desktop>icacls test.txt
  | test.txt NT AUTHORITY\SYSTEM:(I)(F)
  |          BUILTIN\Administrators:(I)(F)
  |          QUICKEM-QPEPI4A\Quickemu:(I)(F)
  |          Mandatory Label\High Mandatory Level:(NW)
  | 
  | Successfully processed 1 files; Failed processing 0 files
  `----


6 User Account Control (UAC)
============================

  User Access Control -> UAC

  UAC is a Windows security feature that protects the operating system
  by running most application and tasks with standard user privileges,
  even if the user launching them is an Administrator.

  After a succesful authentication, an administrative user obtains two
  access token:

  - The first token is a standard user token (filtered admin token),
    which is used to perform all non-privileged operations.

  - The second token is a regular administrator token. It will be used
    when the user wants to perform a privileged operation.

  To levearege the administrator token, a UAC consent prompt needs to be
  confirmed.


7 References
============

  - Security Identifiers (SIDs)
    - <https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-identifiers>
    - <https://learn.microsoft.com/en-us/windows/win32/api/winnt/ne-winnt-well_known_sid_type>

  - Access Tokens
    - <https://learn.microsoft.com/en-us/windows/win32/secauthz/access-tokens>

  - Mandatory Integrity Controls
    - <https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control>

  - File Permissions (icacls.exe)
    - <https://superuser.com/questions/322423/explain-the-output-of-icacls-exe-line-by-line-item-by-item>
    - <https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc753525(v=ws.10)?redirectedfrom=MSDN>

  - Play with Windows API and Impersonation
    - <https://0x00-0x00.github.io/research/2018/10/17/Windows-API-and-Impersonation-Part1.html>
