                     ______________________________

                      WINDOWS PRIVILEGE ESCALATION
                            Scheduled Tasks

                                Hexdump
                     ______________________________


Table of Contents
_________________

1. What are Scheduled Tasks?
.. 1. Scheduled Tasks Data
..... 1. General Information
..... 2. Triggers
..... 3. Actions
..... 4. Conditions
..... 5. Settings
..... 6. Security Settings
..... 7. Last Run/Execution Information
2. Enumeration
3. Creation and Deletion
4. Exploitation
5. References


1 What are Scheduled Tasks?
===========================

  Scheduled Tasks are Windows computer programs or scripts that are
  executed automatically based on a specified `schedule' or `trigger
  condition'.

  They are managed by the *Task Scheduler* and they can be used for
  various types of tasks:

  - Backup operations
  - System maintenance
  - Custom scripts

  As always, when we have a system that is designed to `execute arbitray
    code' we must be careful into how it is being used and in who has
    access to such system, as it represents an attack surface.


1.1 Scheduled Tasks Data
~~~~~~~~~~~~~~~~~~~~~~~~

  Scheduled tasks contains different kinds of data


1.1.1 General Information
-------------------------

  We start with basic information about the task:

  - *Name*

  - *Path*

    The folder path in the Task Scheduler Library where the task is
    stored.

  - *Description*

  - *Enabled/Disabled*

  - *Author*

  ----------------------------------------------------------------------

  Notice that for tasks the identifier path+name has to be unique. This
  means that

  - Task with the same name can exists in different folders.
  - In the same folder, task with the same name cannot exist.


1.1.2 Triggers
--------------

  Triggers specify the conditions under which the task will run.  There
  are different types of triggers:

  - *Time-based Triggers*

    Run daily, weekly, monthly, or at a specific time.

  - *Event-based Triggers*

    Triggered by system events like user logon, system startup, or an
    event in the event log.

  - *Custom Triggers*

    Can include conditions like idle time, connection to a network, or
    workstation lock/unlock.

  Each trigger includes:

  - Start time/date
  - Recurrence Interval
  - End date/time (optional)


1.1.3 Actions
-------------

  Specifies the task to be executed:

  - *Executable Path / Command*

  - *Arguments*

  - *Working Directory*


1.1.4 Conditions
----------------

  Specify the conditions under which the task will run:

  - *Idle Time*

  - *Power Conditions*

  - *Network Conditions*


1.1.5 Settings
--------------

  General execution settings:

  - *Allow Task to be Run on Demand*

  - *Run Task as Soon as Possible After a Missed Start*

  - *Restart on Failure*

  - *Stop Task if it Runs Longer Than*

  - *Start in Specific Window*


1.1.6 Security Settings
-----------------------

  With respect to security, it is important to consider the following
  settings:

  - *Run as User*

    The user account under which the task runs.

  - *Run with Highest Privileges*

    Runs the task with elevated permissions if needed.

  - *Group Access Permissions*

    Defines which user groups can modify or run the task.


1.1.7 Last Run/Execution Information
------------------------------------

  Finally

  - *Last Run Time*

    Timestamp of the last successful run

  - *Last Run Result / Status*

    Exit code or success/error details.

  - *Next Run Time*

    The next scheduled execution time.


2 Enumeration
=============

  *List all scheduled tasks*

  ,----
  | Get-ScheduledTask
  `----

  ,----
  | schtasks /query
  `----

  *List Tasks in a Specific Folder*

  ,----
  | Get-ScheduledTask | Where-Object {$_.TaskPath -eq "\Microsoft\Windows\Shell\"}
  `----

  ----------------------------------------------------------------------

  *List tasks with detailed information*

  ,----
  | Get-ScheduledTask -TaskName "MyTask" | Get-ScheduledTaskInfo
  `----

  ,----
  | schtasks /query /FO LIST /V
  `----

  ,----
  | Get-ScheduledTask -TaskName "XblGameSaveTask" | Format-List *
  `----

  ----------------------------------------------------------------------

  *Extract binary path and arguments of services*

  ,----
  | (Get-ScheduledTask -TaskName "XblGameSaveTask").Actions
  `----

  ,----
  | Get-ScheduledTask | ForEach-Object { $_.Actions }
  `----

  ----------------------------------------------------------------------

  *Export task configuration as XML*

  ,----
  | Export-ScheduledTask -TaskName "XblGameSaveTask" -TaskPath "\Microsoft\XblGameSave\"
  `----


3 Creation and Deletion
=======================

  Simple task that runs when user logins to execute `notepad.exe'
  ,----
  | $action = New-ScheduledTaskAction -Execute "notepad.exe"
  | $trigger = New-ScheduledTaskTrigger -AtLogOn
  | Register-ScheduledTask -TaskName "MyTask" -Action $action -Trigger $trigger -User "quickem-h5dsq1v\quickemu"
  `----

  Delete task
  ,----
  | Unregister-ScheduledTask -TaskName "SimpleTask" -Confirm:$false
  `----


4 Exploitation
==============

  Define task config
  ,----
  | $Action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-File C:\Users\Quickemu\tasks\test1.ps1"
  | $Trigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 1) -RepetitionDuration (New-TimeSpan -Days 365)
  | $Principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
  `----

  Register task
  ,----
  | Register-ScheduledTask -TaskName "SimpleTask" -Action $Action -Trigger $Trigger -Principal $Principal
  `----

  In the definition we see that we're executing the
  `C:\Users\Quickemu\tasks\test1.ps1' file using `powershell.exe' every
  minute for an entire year, and the task is executed as the `SYSTEM'
  account.
  ,----
  | Unregister-ScheduledTask -TaskName "SimpleTask" -Confirm:$false
  `----


5 References
============

  Task Scheduler for developers
  <https://learn.microsoft.com/it-it/windows/win32/taskschd/task-scheduler-start-page>
